[alias]
	# View abbreviated SHA, description, and history graph of the latest 20 commits
	l = log --pretty=oneline -n 20 --graph --abbrev-commit

	# View the current working tree status using the short format
	s = status -s

	# Clone a repository including all submodules
	c = clone --recursive

	# Pull in remote changes for the current repository and all its submodules
	p = !"git pull; git submodule foreach git pull origin master"

	# Switch to a branch, creating it if necessary
	go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

	# Color graph log view
	graph = log --graph --color --pretty=format:"%C(yellow)%H%C(green)%d%C(reset)%n%x20%cd%n%x20%cn%x20(%ce)%n%x20%s%n"

	# Show verbose output about tags, branches or remotes
	tags = tag -l
	branches = branch -a
	remotes = remote -v

	# Amend the currently staged files to the latest commit
	amend = commit --amend --reuse-message=HEAD

	# Credit an author on the latest commit
	credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

	# Interactive rebase with the given number of latest commits
	reb = "!r() { git rebase -i HEAD~$1; }; r"

	# Find branches containing commit
	fb = "!f() { git branch -a --contains $1; }; f"

	# Find tags containing commit
	ft = "!f() { git describe --always --contains $1; }; f"

	# Remove branches that have already been merged with master
	# a.k.a. ‘delete merged’
	dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d; git remote -v update -p"

	# List contributors with number of commits
	contributors = shortlog --summary --numbered

	lg = log --color --decorate --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an (%G?)>%Creset' --abbrev-commit

	# from trevor bramble https://twitter.com/TrevorBramble/status/774292970681937920
	alias=!git config -l | grep ^alias | cut -c 7- | sort

	# Checkout a pull request from origin (of a github repository)
	pr = !"pr() { git fetch origin pull/$1/head:pr-$1; git checkout pr-$1; }; pr"

[url "git@github.com:github"]

	insteadOf = "https://github.com/github"
	insteadOf = "github:github"
	insteadOf = "git://github.com/github"

[url "git@github.com:"]

	pushInsteadOf = "https://github.com/"
	pushInsteadOf = "github:"
	pushInsteadOf = "git://github.com/"

[url "git://github.com/"]

	insteadOf = "github:"

[url "git@gist.github.com:"]

	insteadOf = "gst:"
	pushInsteadOf = "gist:"
	pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]

	insteadOf = "gist:"

[includeIf "gitdir:**/Personal/"]
  path = ~/.gitconfig-personal

[includeIf "gitdir:**/Work/"]
  path = ~/.gitconfig-work

[commit]
	# gpgsign = true
	template = ~/.gitmessage.txt

[pull]
	rebase = true

[gpg]
	# I need to think of a way to avoid hard coding the path
	{{ if eq .chezmoi.os "windows" }}
	program = D:\\Program Files\\GnuPG\\bin\\gpg.exe
	{{ else }}
	program = /opt/homebrew/bin/gpg
	{{- end }}
	
[user]
	signingkey = 9164F0D7F44CD049

[init]
	defaultBranch = main
	templatedir = ~/.git-templates

[core]
	editor = code-insiders
	{{- if eq .chezmoi.os "windows" }}
	autocrlf = true
	sshCommand = 'C:\\Windows\\System32\\OpenSSH\\ssh.exe'
	{{ else }}
	autocrlf = input
	{{- end }}

[credential "https://github.com"]
	{{- if eq .chezmoi.os "windows" }}
	helper = 'D:\\Program Files\\Github-CLI\\gh.exe auth git-credential'
	{{ else }}
	helper = /opt/homebrew/bin/gh auth git-credential
	{{ end }}

[push]
	autoSetupRemote = true