# <type>([optional scope])[optional !]: <description>
# [optional body]
# [optional footer(s)]

### Types
# - feat:       adds a new feature (API)
# - fix:        fixes a bug (API)
# - refactor:   rewrite/restructure your code, however does not change any behaviour
# - perf:       Commits are special refactor improve performance
# - style:      do not affect the meaning (white-space, formatting, missing semi-colons, etc)
# - test:       add missing tests or correcting existing tests
# - docs:       affect documentation only
# - build:      affect build components like build tool, ci pipeline, dependencies, project version, ...
# - ops:        affect operational components like infrastructure, deployment, backup, recovery, ...
# - chore       Miscellaneous commits e.g. modifying .gitignore

### Scopes
# - The scope provides additional contextual information.
# - Is an **optional** part of the format
# - Allowed Scopes depends on the specific project
# - Don't use issue identifiers as scopes
# - Can also include a ! after the scope to denote a Breaking Change

### Subject
# - The `subject` contains a succinct description of the change.
# - Is a **mandatory** part of the format
# - Use the imperative, present tense: "change" not "changed" nor "changes"
# - Don't capitalize the first letter
# - No dot (.) at the end

### Body
# - The `body` should include the motivation for the change and contrast this with previous behavior.
# - Is an **optional** part of the format
# - Use the imperative, present tense: "change" not "changed" nor "changes"
# - This is the place to mention issue identifiers and their relations

### Footer
# - The `footer` should contain any information about **Breaking Changes** and is also the place to **reference Issues** that this commit refers to.
# - Is an **optional** part of the format
# - **optionally** reference an issue by its id.
# - **Breaking Changes** should start with the word `BREAKING CHANGES:` followed by space or two newlines. The rest of the commit message is then used for this.